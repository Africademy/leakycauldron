version: 2
jobs:
  build:
    docker:
      - image: circleci/openjdk:11-jdk
      - image: circleci/postgres:10
        environment:
          POSTGRES_USER: tribe
          POSTGRES_DB: tribe

    working_directory: ~/repo
    environment:
      MAVEN_OPTS: -Xmx128m

    steps:
      # get code
      - checkout
      # handle dependency caching and run build
      - restore_cache:
          keys:
            - v1-dependencies-{{ .Branch }}-{{ .Revision }}
            - v1-dependencies-{{ .Branch }}
            - v1-dependencies-
      - run: mvn install
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ .Branch }}-{{ .Revision }}
      # collect test results and upload coverage
      - run: mkdir -p ~/test_results
      - run: find . -type f -regex ".*/target/surefire-reports/junitreports/.*xml" -exec cp {} ~/test_results/ \;
      - store_test_results:
          path: ~/test_results
      - store_artifacts:
          path: ~/test_results
      - run: bash <(curl -s https://codecov.io/bash) -t ${CODECOV_TOKEN}
      # collect docs
      - run: mkdir -p ~/docs
      - run: find . -type d -name 'dokka' -exec cp -r {} ~/docs/ \;
      - store_artifacts:
          path: ~/docs
      # collect built jars and save to workspace for deploy
      - run: mkdir -p ~/jars
      - run: find . -type f -regex ".*/target/.*jar" -exec cp {} ~/jars/ \;
      - store_artifacts:
          path: ~/jars
      - persist_to_workspace:
          root: ~/jars
          paths:
            - .

  deploy:
    docker:
      - image: circleci/python:3.6 # more likely to already be on the new host than the java image
    steps:
      - attach_workspace:
          at: ~/jars
      - run: sudo apt install awscli uuid-runtime
      - run:
          name: Deploy to Lambda
          command: |
            NEWVERSION=$(aws lambda update-function-code --function-name ${AWS_LAMBDA_FUNCTION_NAME} --zip-file fileb://`ls ~/jars/server-*-shaded.jar` --publish | jq '.Version' -r)
            aws lambda invoke --function-name ${AWS_LAMBDA_FUNCTION_NAME} --qualifier ${NEWVERSION} --payload '{"path": "/ping", "httpMethod": "GET"}' /dev/stderr > /dev/null
            aws lambda add-permission   --function-name "arn:aws:lambda:${AWS_DEFAULT_REGION}:${AWS_ACCOUNT_ID}:function:${AWS_LAMBDA_FUNCTION_NAME}:${NEWVERSION}"   --source-arn "arn:aws:execute-api:${AWS_DEFAULT_REGION}:${AWS_ACCOUNT_ID}:${AWS_APIGATEWAY_API_ID}/*/*/*"   --principal apigateway.amazonaws.com   --statement-id `uuidgen`   --action lambda:InvokeFunction
            aws apigateway update-stage --rest-api-id ${AWS_APIGATEWAY_API_ID} --stage-name default --patch-operations op="replace",path=/variables/lambdaVersion,value="${NEWVERSION}"
            aws apigateway create-deployment --rest-api-id ${AWS_APIGATEWAY_API_ID}  --stage-name default --description "Deploy ${AWS_LAMBDA_FUNCTION_NAME} with version ${NEWVERSION}"

workflows:
  version: 2
  build_pipeline:
    jobs:
      - build
      - hold:
          type: approval
          requires:
            - build
          filters:
            branches:
              only:
                - master
      - deploy:
          requires:
            - hold
          filters:
            branches:
              only:
                - master
