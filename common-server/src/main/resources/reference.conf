application {
  name: "Unnamed Tribe Service"
  domain: "localhost"
  domain: ${?CORS_DOMAIN}
  modules: []
}

server {
  type: simple
  applicationContextPath: /app
  adminContextPath: /admin
  connector: {
    type: "http"
    port: 8080
    port: ${?SERVER_PORT}
    port: ${?PORT}
  }
  requestLog {
    # appenders: [
    #     {
    #         type: console
    #         logFormat: "%h %l %u [%t{dd/MMM/yyyy:HH:mm:ss Z," + timeZone.getID()
    #                                     + "}] \"%r\" %s %b \"%i{Referer}\" \"%i{User-Agent}\" %D"
    #     }
    # ]
  }
}

logging {
  level: INFO
  appenders: [
    {
      type: console
      timeZone: UTC
      includeCallerData: true
      stackTracePrefix: "\t"
      logFormat: "%d{ISO8601,UTC} [%thread %X{RequestId}] %-5p %c[%L]: %m%n%exception"
    },
    {
      type: file
      currentLogFilename: service.log
      archivedLogFilenamePattern: service.log-%d.gz
      includeCallerData: true
      logFormat: "%d{ISO8601,UTC} [%thread %X{RequestId}] %-5p %c[%L]: %m%n%exception"
    }
  ]
  loggers: {
    "com.zaxxer.hikari": ERROR # Connection pool logging is super verbose
  }
}

metrics {
  frequency: 1 minutes
  reporters: []
}

# Don't use file appenders in lambda
lambda {
  logging {
    appenders: [
      {
        type: console
        timeZone: UTC
        includeCallerData: true
        stackTracePrefix: "\t"
        logFormat: "%d{ISO8601,UTC} [%thread %X{RequestId}] %-5p %c[%L]: %m%n%exception"
      }
    ]
  }
}

overrides {
  application {
    adminAuthToken: ${?ADMIN_AUTH_TOKEN}
  }
}
